#!/bin/sh
#
# init.d script
# this script starts and stops the inpanel daemon
# Copyright (c) 2022 Jackson Dou
# All rights reserved.
#
### BEGIN INIT INFO
# Provides:          inpanel
# Required-Start:    $network $local_fs $syslog $remote_fs
# Required-Stop:     $network $local_fs $syslog $remote_fs
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: INPANEL
# Description:       A web-based linux server management tools
### END INIT INFO

# Default defaults.  Can be overridden by the /etc/default/$NAME

NAME="inpanel"
DESC="InPanel Daemon"
PIDFILE="/usr/local/var/run/inpanel.pid"
LOCKFILE="/var/lock/subsys/$NAME"
DAEMON="/usr/local/inpanel/inpanel"
RUNAS="root"
STARTTIME=1
DIETIME=10 # Time to wait for the server to die, in seconds
# If this value is set too low you might not let some servers to die gracefully and 'restart' will not work

. /lib/lsb/init-functions

check_pid() {
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] && return 1
    cmd=$(cat /proc/$pid/cmdline | tr "\000" "\n" | head -n 1 | cut -d : -f 1)
    # Is this the expected server
    [ "$cmd" != "$name" ] && return 1
    return 0
}

check_running() {
    # Check if the process is running looking at /proc (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=$(cat $PIDFILE)
    check_pid $pid $DAEMON || return 1
    return 0
}

do_start() {
    # Start the process using the wrapper
    start-stop-daemon --background --start --quiet --pidfile $PIDFILE \
        --make-pidfile --chuid $RUNAS \
        --exec $DAEMON
    errcode=$?
    return $errcode
}

do_stop() {
    # Stop the process using the wrapper
    start-stop-daemon --stop --quiet --pidfile $PIDFILE \
        --user $RUNAS \
        --exec $DAEMON
    errcode=$?
    return $errcode
}

force_stop() {
    # Force the process to die killing it manually
    [ ! -e "$PIDFILE" ] && return
    if check_running; then
        kill -15 $pid
        # Is it really dead?
        sleep "$DIETIME"s
        if check_running; then
            kill -9 $pid
            sleep "$DIETIME"s
            if check_running; then
                echo "Cannot kill $NAME (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    rm -f $LOCKFILE
}

case "$1" in
start)
    log_daemon_msg "Starting $DESC" "$NAME"
    # Check if it's running first
    if check_running; then
        log_progress_msg "already running"
        log_end_msg 0
        exit 0
    fi
    if do_start; then
        # NOTE: Some servers might die some time after they start,
        # this code will detect this issue if STARTTIME is set
        # to a reasonable value
        [ -n "$STARTTIME" ] && sleep $STARTTIME # Wait some time
        if check_running; then
            # It's ok, the server started and is running
            touch $LOCKFILE
            log_end_msg 0
        else
            # It is not running after we did start
            rm -f $LOCKFILE
            log_end_msg 1
        fi
    else
        # Either we could not start it
        log_end_msg 1
    fi
    ;;
stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    if check_running; then
        # Only stop the server if we see it running
        errcode=0
        do_stop || errcode=$?
        log_end_msg $errcode
    else
        # If it's not running don't do anything
        log_progress_msg "not running"
        log_end_msg 0
        exit 0
    fi
    ;;
force-stop)
    # First try to stop gracefully the program
    $0 stop
    if check_running; then
        # If it's still running try to kill it more forcefully
        log_daemon_msg "Stopping (force) $DESC" "$NAME"
        errcode=0
        force_stop || errcode=$?
        log_end_msg $errcode
    fi
    ;;
restart | force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    errcode=0
    do_stop || errcode=$?
    # Wait some sensible amount, some server need this
    [ -n "$DIETIME" ] && sleep $DIETIME
    do_start || errcode=$?
    [ -n "$STARTTIME" ] && sleep $STARTTIME
    check_running || errcode=$?
    log_end_msg $errcode
    ;;
status)
    log_daemon_msg "Checking status of $DESC" "$NAME"
    if check_running; then
        log_progress_msg "running"
        log_end_msg 0
        echo "running"
    else
        log_progress_msg "not running"
        log_end_msg 1
        echo "not running"
        exit 1
    fi
    ;;
*)
    echo "Usage: $0 {start|stop|force-stop|restart|force-reload|status}" >&2
    exit 1
    ;;
esac

exit 0
